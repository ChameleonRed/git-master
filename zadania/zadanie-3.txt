Zadanie 3

Zarząd zmienia zadanie, że należy wyświetlić 300 cyfr, w rzędach po 30.
Pojawia się nowa modna teoria "przeklętych" cyfr, która opanowuje dział bezpieczeństwa.

Dodatkowo należy ukryć liczby z cyframi "przeklętymi" przez dział bezpieczeństwa.
Wedle wierzeń zespołów dla pierwszego zespołu "przeklęta" jest cyfra 1,
dla drugiego 2, itd. Liczby zawierające takie liczby muszą być ukryte.

Stwórz funkcję is_cursed_prime(number), która zwraca prawdę dla przeklętych liczb.
Użyj ten funkcji w wizualizacji do wykrywania "przeklętych" cyfr.

Główny programista:
1. Tworzysz nową wersję v-1-3.
2. Tworzysz gałąź e-cursed-numbers-detection, e-cursed-numbers-view.
3. Tworzysz prototyp is_cursed_prime(number) na e-cursed-numbers-detection.
4. Zlecasz programistom kodowanie.
5. Łączysz kod.
5. Uruchamiasz i zgłaszasz błędy zespołowi.
6. Łączysz poprawki od zespołu (nowa rewizja v-*-*-1, v-*-*-2, ...).

Programista funkcji:
1. Rozwijasz kod e-cursed-numbers-detection.
2. Kodujesz funkcję is_cursed_prime(number).

Programista wizualizacji:
1. Rozwijasz kod e-cursed-numbers-view.
2. Używasz funkcji is_cursed_prime(number).

Kryteria oceny:
- jakość kodu (nazewnictwo, dokumentacja) (punkty 1-3)
- brak błędów (punkty 1-3)
- poprawne gałęzie (punkty 1-3)
- praca zespołowa w Git (udział całego zespołu) (punkty 1-3)

Główny programista:
* Zapisuje punkty po ocenie w <nazwa-zespołu>.txt.
* Zatwierdza kod.